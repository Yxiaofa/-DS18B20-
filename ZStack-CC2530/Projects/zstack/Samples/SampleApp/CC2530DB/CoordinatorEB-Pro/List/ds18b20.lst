###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         12/May/2021  11:04:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\SampleApp\Source\ds18b20. #
#                          c                                                  #
#    Command line       =  -f "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\Source\ds18b20 #
#                          .c" -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D        #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -lC                   #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\Coord #
#                          inatorEB-Pro\List\" -lA "E:\zb\温湿度采集1 -       #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\"   #
#                          --diag_suppress Pe001,Pa010 -o "E:\zb\温湿度采集1  #
#                          - 副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\"  #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\"  #
#                          -I "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \SOURCE\" -I "E:\zb\温湿度采集1 -                  #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"  #
#                          -I "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MT\" -I                    #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\" -I              #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I      #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I           #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\" -I             #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\" -I                 #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\" -I                #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\" -I                #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\" -I               #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\" -I                #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\" -I                #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\" -I                 #
#                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\" -I "E:\zb\温湿度采集1  #
#                          - 副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "E:\zb\温湿度采集1 -         #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SDATA\" -I "E:\zb\温湿度采集1 -           #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\INCLUDE\" -I "E:\zb\温湿度采集1 -              #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\HIGH_LEVEL\" -I "E:\zb\温湿度采集1 -           #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\" -I "E:\zb\温湿度采集1 -      #
#                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz             #
#    List file          =  E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB-Pro\List\ds18b20.lst                       #
#    Object file        =  E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB-Pro\Obj\ds18b20.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ds18b20.c
      1          #include "ds18b20.h" 

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe2
   \   unsigned char volatile __sfr T1CNTL
   \                     T1CNTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe3
   \   unsigned char volatile __sfr T1CNTH
   \                     T1CNTH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      2          
      3          #define Ds18b20IO P0_7       //温度传感器引脚
      4          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      5          void Delay_us(unsigned int k)//us延时函数
   \                     Delay_us:
      6          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
      7              T1CC0L = 0x06; 
   \   000000   75DA06       MOV     0xda,#0x6
      8              T1CC0H = 0x00; 
   \   000003   75DB00       MOV     0xdb,#0x0
      9              T1CTL = 0x02; 
   \   000006   75E402       MOV     0xe4,#0x2
   \   000009   800F         SJMP    ??Delay_us_0
     10              while(k)
     11              { 
     12                  while(!(T1CNTL >= 0x04));
   \                     ??Delay_us_1:
   \   00000B   E5E2         MOV     A,0xe2
   \   00000D   C3           CLR     C
   \   00000E   9404         SUBB    A,#0x4
   \   000010   40F9         JC      ??Delay_us_1
     13                  k--;
   \   000012   EA           MOV     A,R2
   \   000013   24FF         ADD     A,#-0x1
   \   000015   1A           DEC     R2
   \   000016   EB           MOV     A,R3
   \   000017   34FF         ADDC    A,#-0x1
   \   000019   FB           MOV     R3,A
     14              }
   \                     ??Delay_us_0:
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70ED         JNZ     ??Delay_us_1
     15              T1CTL = 0x00;  //关闭定时器
   \   00001E                REQUIRE ?Subroutine0
   \   00001E                REQUIRE T1CC0L
   \   00001E                REQUIRE T1CC0H
   \   00001E                REQUIRE T1CTL
   \   00001E                REQUIRE T1CNTL
   \   00001E                ; // Fall through to label ?Subroutine0
     16          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75E400       MOV     0xe4,#0x0
   \   000003   02....       LJMP    ?BRET
     17          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     18          void Delay_ms(unsigned int k)
   \                     Delay_ms:
     19          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     20              T1CC0L = 0xe8;
   \   000000   75DAE8       MOV     0xda,#-0x18
     21              T1CC0H = 0x03;
   \   000003   75DB03       MOV     0xdb,#0x3
     22              T1CTL = 0x0a; //模模式 32分频
   \   000006   75E40A       MOV     0xe4,#0xa
   \   000009   8016         SJMP    ??Delay_ms_0
     23              while(k)
     24              {
     25                  while(!((T1CNTL >= 0xe8)&&(T1CNTH >= 0x03)));
   \                     ??Delay_ms_1:
   \   00000B   E5E2         MOV     A,0xe2
   \   00000D   C3           CLR     C
   \   00000E   94E8         SUBB    A,#-0x18
   \   000010   40F9         JC      ??Delay_ms_1
   \   000012   E5E3         MOV     A,0xe3
   \   000014   C3           CLR     C
   \   000015   9403         SUBB    A,#0x3
   \   000017   40F2         JC      ??Delay_ms_1
     26                  k--;
   \   000019   EA           MOV     A,R2
   \   00001A   24FF         ADD     A,#-0x1
   \   00001C   1A           DEC     R2
   \   00001D   EB           MOV     A,R3
   \   00001E   34FF         ADDC    A,#-0x1
   \   000020   FB           MOV     R3,A
     27              }
   \                     ??Delay_ms_0:
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   70E6         JNZ     ??Delay_ms_1
     28              T1CTL = 0x00; //关闭定时器
   \   000025   80..         SJMP    ?Subroutine0
   \   000027                REQUIRE T1CC0L
   \   000027                REQUIRE T1CC0H
   \   000027                REQUIRE T1CTL
   \   000027                REQUIRE T1CNTL
   \   000027                REQUIRE T1CNTH
     29          }
     30          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     31          void Delay_s(unsigned int k)
   \                     Delay_s:
     32          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   800E         SJMP    ??Delay_s_0
     33              while(k)
     34              {
     35                  Delay_ms(1000);
   \                     ??Delay_s_1:
   \   00000A                ; Setup parameters for call to function Delay_ms
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??Delay_ms?relay
     36                  k--;
   \   000011   EE           MOV     A,R6
   \   000012   24FF         ADD     A,#-0x1
   \   000014   1E           DEC     R6
   \   000015   EF           MOV     A,R7
   \   000016   34FF         ADDC    A,#-0x1
   \                     ??Delay_s_0:
   \   000018   FF           MOV     R7,A
     37              }
   \   000019   EE           MOV     A,R6
   \   00001A   4F           ORL     A,R7
   \   00001B   70ED         JNZ     ??Delay_s_1
     38          }
   \   00001D   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     39          
     40          //时钟频率为32M

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     41          void Ds18b20Delay(unsigned int k)
   \                     Ds18b20Delay:
     42          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     43              unsigned int i,j;
     44              for(i=0;i<k;i++)
   \   000000   7800         MOV     R0,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   8008         SJMP    ??Ds18b20Delay_0
     45                  for(j=0;j<2;j++);
   \                     ??Ds18b20Delay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \                     ??Ds18b20Delay_0:
   \   00000E   C3           CLR     C
   \   00000F   E8           MOV     A,R0
   \   000010   9A           SUBB    A,R2
   \   000011   E9           MOV     A,R1
   \   000012   9B           SUBB    A,R3
   \   000013   40F1         JC      ??Ds18b20Delay_1
     46          }
   \   000015   02....       LJMP    ?BRET
     47          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          void Ds18b20InputInitial(void)//设置端口为输入
   \                     Ds18b20InputInitial:
     49          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     50              P0DIR &= 0x7f;
   \   000000   53FD7F       ANL     0xfd,#0x7f
     51          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE P0DIR
     52          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          void Ds18b20OutputInitial(void)//设置端口为输出
   \                     Ds18b20OutputInitial:
     54          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     55              P0DIR |= 0x80;
   \   000000   43FD80       ORL     0xfd,#0x80
     56          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE P0DIR
     57          
     58          //ds18b20初始化  初始化成功返回0x00，失败返回0x01

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          unsigned char Ds18b20Initial(void)
   \                     Ds18b20Initial:
     60          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     61              unsigned char Status = 0x00;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
     62              unsigned int CONT_1 = 0;
   \   000008   7E00         MOV     R6,#0x0
   \   00000A   7F00         MOV     R7,#0x0
     63              unsigned char Flag_1 = 1;
   \   00000C   75..01       MOV     ?V0 + 1,#0x1
     64              Ds18b20OutputInitial();
   \   00000F   43FD80       ORL     0xfd,#0x80
     65              Ds18b20IO = 1;      //DQ复位
   \   000012   D287         SETB    0x80.7
     66              Ds18b20Delay(260);  //稍做延时
   \   000014                ; Setup parameters for call to function Ds18b20Delay
   \   000014   7A04         MOV     R2,#0x4
   \   000016   7B01         MOV     R3,#0x1
   \   000018   12....       LCALL   ??Ds18b20Delay?relay
     67              Ds18b20IO = 0;      //单片机将DQ拉低
   \   00001B   C287         CLR     0x80.7
     68              Ds18b20Delay(750);  //精确延时 大于 480us 小于960us
   \   00001D                ; Setup parameters for call to function Ds18b20Delay
   \   00001D   7AEE         MOV     R2,#-0x12
   \   00001F   7B02         MOV     R3,#0x2
   \   000021   12....       LCALL   ??Subroutine6_0 & 0xFFFF
     69              Ds18b20IO = 1;      //拉高总线
     70              Ds18b20InputInitial();//设置IO输入
   \                     ??CrossCallReturnLabel_7:
   \   000024   53FD7F       ANL     0xfd,#0x7f
   \   000027   8021         SJMP    ??Ds18b20Initial_0
     71              while((Ds18b20IO != 0)&&(Flag_1 == 1))//等待ds18b20响应，具有防止超时功能
     72              {                                      //等待约60ms左右
     73                  CONT_1++;
   \                     ??Ds18b20Initial_1:
   \   000029   EE           MOV     A,R6
   \   00002A   2401         ADD     A,#0x1
   \   00002C   0E           INC     R6
   \   00002D   EF           MOV     A,R7
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FF           MOV     R7,A
     74                  Ds18b20Delay(10);
   \   000031                ; Setup parameters for call to function Ds18b20Delay
   \   000031   7A0A         MOV     R2,#0xa
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??Ds18b20Delay?relay
     75                  if(CONT_1 > 8000)Flag_1 = 0;
   \   000038   C3           CLR     C
   \   000039   EE           MOV     A,R6
   \   00003A   9441         SUBB    A,#0x41
   \   00003C   EF           MOV     A,R7
   \   00003D   941F         SUBB    A,#0x1f
   \   00003F   4003         JC      ??Ds18b20Initial_2
   \   000041   75..00       MOV     ?V0 + 1,#0x0
     76                  Status = Ds18b20IO;
   \                     ??Ds18b20Initial_2:
   \   000044   A287         MOV     C,0x80.7
   \   000046   E4           CLR     A
   \   000047   33           RLC     A
   \   000048   F5..         MOV     ?V0 + 0,A
     77              }
   \                     ??Ds18b20Initial_0:
   \   00004A   A287         MOV     C,0x80.7
   \   00004C   5006         JNC     ??Ds18b20Initial_3
   \   00004E   E5..         MOV     A,?V0 + 1
   \   000050   A2E0         MOV     C,0xE0 /* A   */.0
   \   000052   40D5         JC      ??Ds18b20Initial_1
     78              Ds18b20OutputInitial();
   \                     ??Ds18b20Initial_3:
   \   000054   43FD80       ORL     0xfd,#0x80
     79              Ds18b20IO = 1;
   \   000057   D287         SETB    0x80.7
     80              Ds18b20Delay(100);
   \   000059                ; Setup parameters for call to function Ds18b20Delay
   \   000059   7A64         MOV     R2,#0x64
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   12....       LCALL   ??Ds18b20Delay?relay
     81              return Status;       //返回初始化状态
   \   000060   A9..         MOV     R1,?V0 + 0
   \   000062   7F02         MOV     R7,#0x2
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000067                REQUIRE _A_P0
   \   000067                REQUIRE P0DIR
     82          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ??Ds18b20Delay?relay
   \   000003   D287         SETB    0x80.7
   \   000005   22           RET
     83          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          void Ds18b20Write(unsigned char infor)
   \                     Ds18b20Write:
     85          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
     86              unsigned int i;
     87              Ds18b20OutputInitial();
   \   000007   43FD80       ORL     0xfd,#0x80
     88              for(i=0;i<8;i++)
   \   00000A   7E08         MOV     R6,#0x8
     89              {
     90                  if((infor & 0x01))
   \                     ??Ds18b20Write_0:
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   C287         CLR     0x80.7
   \   000011   5009         JNC     ??Ds18b20Write_1
     91                  {
     92                      Ds18b20IO = 0;
     93                      Ds18b20Delay(6);
   \   000013                ; Setup parameters for call to function Ds18b20Delay
   \   000013   7A06         MOV     R2,#0x6
   \   000015   12....       LCALL   ?Subroutine3 & 0xFFFF
     94                      Ds18b20IO = 1;
     95                      Ds18b20Delay(50);
   \                     ??CrossCallReturnLabel_4:
   \   000018                ; Setup parameters for call to function Ds18b20Delay
   \   000018   7A32         MOV     R2,#0x32
   \   00001A   8007         SJMP    ??Ds18b20Write_2
     96                  }
     97                  else
     98                  {
     99                      Ds18b20IO = 0;
    100                      Ds18b20Delay(50);
   \                     ??Ds18b20Write_1:
   \   00001C                ; Setup parameters for call to function Ds18b20Delay
   \   00001C   7A32         MOV     R2,#0x32
   \   00001E   12....       LCALL   ?Subroutine3 & 0xFFFF
    101                      Ds18b20IO = 1;
    102                      Ds18b20Delay(6);
   \                     ??CrossCallReturnLabel_5:
   \   000021                ; Setup parameters for call to function Ds18b20Delay
   \   000021   7A06         MOV     R2,#0x6
   \                     ??Ds18b20Write_2:
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Ds18b20Delay?relay
    103                  }
    104                  infor >>= 1;
   \   000028   EF           MOV     A,R7
   \   000029   C3           CLR     C
   \   00002A   13           RRC     A
   \   00002B   FF           MOV     R7,A
    105              }
   \   00002C   1E           DEC     R6
   \   00002D   EE           MOV     A,R6
   \   00002E   70DC         JNZ     ??Ds18b20Write_0
    106          }
   \   000030   02....       LJMP    ??Subroutine5_0 & 0xFFFF
   \   000033                REQUIRE _A_P0
   \   000033                REQUIRE P0DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0
    107          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine5_0
   \   000001                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          unsigned char Ds18b20Read(void)
   \                     Ds18b20Read:
    109          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    110              unsigned char Value = 0x00;
   \   000005   7E00         MOV     R6,#0x0
    111              unsigned int i;
    112              Ds18b20OutputInitial();
   \   000007   43FD80       ORL     0xfd,#0x80
    113              Ds18b20IO = 1;
   \   00000A   D287         SETB    0x80.7
    114              Ds18b20Delay(10);
   \   00000C                ; Setup parameters for call to function Ds18b20Delay
   \   00000C   7A0A         MOV     R2,#0xa
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??Ds18b20Delay?relay
    115              for(i=0;i<8;i++)
   \   000013   7F08         MOV     R7,#0x8
    116              {
    117                  Value >>= 1; 
   \                     ??Ds18b20Read_0:
   \   000015   EE           MOV     A,R6
   \   000016   C3           CLR     C
   \   000017   13           RRC     A
   \   000018   FE           MOV     R6,A
    118                  Ds18b20OutputInitial();
   \   000019   43FD80       ORL     0xfd,#0x80
    119                  Ds18b20IO = 0;// 给脉冲信号
   \   00001C   C287         CLR     0x80.7
    120                  Ds18b20Delay(3);
   \   00001E                ; Setup parameters for call to function Ds18b20Delay
   \   00001E   7A03         MOV     R2,#0x3
   \   000020   12....       LCALL   ?Subroutine3 & 0xFFFF
    121                  Ds18b20IO = 1;// 给脉冲信号
    122                  Ds18b20Delay(3);
   \                     ??CrossCallReturnLabel_6:
   \   000023                ; Setup parameters for call to function Ds18b20Delay
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   ??Ds18b20Delay?relay
    123                  Ds18b20InputInitial();
   \   00002A   53FD7F       ANL     0xfd,#0x7f
    124                  if(Ds18b20IO == 1) Value |= 0x80;
   \   00002D   A287         MOV     C,0x80.7
   \   00002F   5004         JNC     ??Ds18b20Read_1
   \   000031   EE           MOV     A,R6
   \   000032   D2E7         SETB    0xE0 /* A   */.7
   \   000034   FE           MOV     R6,A
    125                  Ds18b20Delay(15);
   \                     ??Ds18b20Read_1:
   \   000035                ; Setup parameters for call to function Ds18b20Delay
   \   000035   7A0F         MOV     R2,#0xf
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??Ds18b20Delay?relay
    126              } 
   \   00003C   1F           DEC     R7
   \   00003D   EF           MOV     A,R7
   \   00003E   70D5         JNZ     ??Ds18b20Read_0
    127              return Value;
   \   000040   EE           MOV     A,R6
   \   000041   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000044                REQUIRE _A_P0
   \   000044                REQUIRE P0DIR
    128          }
    129          
    130          //温度读取函数

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          unsigned char ReadDs18B20(void) 
   \                     ReadDs18B20:
    132          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    133              unsigned char V1,V2;   //定义高低8位 缓冲
    134              unsigned char temp;    //定义温度缓冲寄存器
    135              
    136              Ds18b20Initial();
   \   000005                ; Setup parameters for call to function Ds18b20Initial
   \   000005   12....       LCALL   ?Subroutine2 & 0xFFFF
    137              Ds18b20Write(0xcc);    // 跳过读序号列号的操作
    138              Ds18b20Write(0x44);    // 启动温度转换
    139              
    140              Ds18b20Initial();
    141              Ds18b20Write(0xcc);    //跳过读序号列号的操作 
    142              Ds18b20Write(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
    143              
    144              V1 = Ds18b20Read();    //低位
   \                     ??CrossCallReturnLabel_0:
   \   000008   FE           MOV     R6,A
    145              V2 = Ds18b20Read();    //高位
    146              temp = ((V1 >> 4)+((V2 & 0x07)*16)); //转换数据 
    147          
    148              return temp;
   \   000009                ; Setup parameters for call to function Ds18b20Read
   \   000009   12....       LCALL   ??Ds18b20Read?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   5407         ANL     A,#0x7
   \   00000F   C4           SWAP    A
   \   000010   F8           MOV     R0,A
   \   000011   EE           MOV     A,R6
   \   000012   C4           SWAP    A
   \   000013   540F         ANL     A,#0xf
   \   000015   28           ADD     A,R0
   \   000016   02....       LJMP    ?Subroutine1 & 0xFFFF
    149          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003   7944         MOV     R1,#0x44
   \   000005   12....       LCALL   ??Ds18b20Write?relay
   \   000008                ; Setup parameters for call to function Ds18b20Initial
   \   000008                ; Setup parameters for call to function Ds18b20Initial
   \   000008   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000B                ; Setup parameters for call to function Ds18b20Write
   \   00000B                ; Setup parameters for call to function Ds18b20Write
   \   00000B   79BE         MOV     R1,#-0x42
   \   00000D   12....       LCALL   ??Ds18b20Write?relay
   \   000010                ; Setup parameters for call to function Ds18b20Read
   \   000010                ; Setup parameters for call to function Ds18b20Read
   \   000010   12....       LCALL   ??Ds18b20Read?relay
   \   000013   E9           MOV     A,R1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??Ds18b20Initial?relay
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003                ; Setup parameters for call to function Ds18b20Write
   \   000003   79CC         MOV     R1,#-0x34
   \   000005   12....       LCALL   ??Ds18b20Write?relay
   \   000008   22           RET
    150          
    151          //温度读取函数 带1位小数位

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    152          float floatReadDs18B20(void) 
   \                     floatReadDs18B20:
    153          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    154              unsigned char V1,V2;   //定义高低8位 缓冲
    155              unsigned int temp;     //定义温度缓冲寄存器
    156              float fValue;
    157              Ds18b20Initial();
   \   000005                ; Setup parameters for call to function Ds18b20Initial
   \   000005   12....       LCALL   ?Subroutine2 & 0xFFFF
    158              Ds18b20Write(0xcc);    // 跳过读序号列号的操作
    159              Ds18b20Write(0x44);    // 启动温度转换
    160              
    161              Ds18b20Initial();
    162              Ds18b20Write(0xcc);    //跳过读序号列号的操作 
    163              Ds18b20Write(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
    164              
    165              V1 = Ds18b20Read();    //低位
   \                     ??CrossCallReturnLabel_1:
   \   000008   F5..         MOV     ?V0 + 0,A
    166              V2 = Ds18b20Read();    //高位
    167              //temp = ((V1 >> 4)+((V2 & 0x07)*16)); //转换数据 
    168              temp=V2*0xFF+V1;
    169              fValue = temp*0.0625;
    170              
    171              return fValue;
   \   00000A                ; Setup parameters for call to function Ds18b20Read
   \   00000A   12....       LCALL   ??Ds18b20Read?relay
   \   00000D   E9           MOV     A,R1
   \   00000E   75F0FF       MOV     B,#-0x1
   \   000011   A4           MUL     AB
   \   000012   25..         ADD     A,?V0 + 0
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   E5F0         MOV     A,B
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 1,A
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V0 + 2,A
   \   00001F   F5..         MOV     ?V0 + 3,A
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?UL_TO_FLT
   \   000026   90....       MOV     DPTR,#__Constant_3d800000
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?L_MOV_X
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   79..         MOV     R1,#?V0 + 4
   \   000032   12....       LCALL   ?FLT_MUL
   \   000035   AA..         MOV     R2,?V0 + 0
   \   000037   AB..         MOV     R3,?V0 + 1
   \   000039   AC..         MOV     R4,?V0 + 2
   \   00003B   AD..         MOV     R5,?V0 + 3
   \   00003D   7F08         MOV     R7,#0x8
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    172          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3d800000:
   \   000000   0000803D     DD 3D800000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_ms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_s?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_s

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20Delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20Delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20InputInitial?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20InputInitial

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20OutputInitial?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20OutputInitial

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20Initial?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20Initial

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20Write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Ds18b20Read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Ds18b20Read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadDs18B20?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadDs18B20

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??floatReadDs18B20?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    floatReadDs18B20

   Maximum stack usage in bytes:

     Function             ISTACK PSTACK XSTACK
     --------             ------ ------ ------
     Delay_ms                 0      0      9
     Delay_s                  0      0      9
       -> Delay_ms            0      0     18
     Delay_us                 0      0      0
     Ds18b20Delay             0      0     10
     Ds18b20Initial           0      0     26
       -> Ds18b20Delay        0      0     20
       -> Ds18b20Delay        0      0     20
       -> Ds18b20Delay        0      0     20
       -> Ds18b20Delay        0      0     20
     Ds18b20InputInitial      0      0      0
     Ds18b20OutputInitial     0      0      0
     Ds18b20Read              0      0     25
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
     Ds18b20Write             0      0     25
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
       -> Ds18b20Delay        0      0     18
     ReadDs18B20              0      0      9
       -> Ds18b20Initial      0      0     18
       -> Ds18b20Write        0      0     18
       -> Ds18b20Write        0      0     18
       -> Ds18b20Initial      0      0     18
       -> Ds18b20Write        0      0     18
       -> Ds18b20Write        0      0     18
       -> Ds18b20Read         0      0     18
       -> Ds18b20Read         0      0     18
     floatReadDs18B20         0      0     16
       -> Ds18b20Initial      0      0     32
       -> Ds18b20Write        0      0     32
       -> Ds18b20Write        0      0     32
       -> Ds18b20Initial      0      0     32
       -> Ds18b20Write        0      0     32
       -> Ds18b20Write        0      0     32
       -> Ds18b20Read         0      0     32
       -> Ds18b20Read         0      0     32


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     _A_P0                           1
     T1CC0L                          1
     T1CC0H                          1
     T1CNTL                          1
     T1CNTH                          1
     T1CTL                           1
     P0DIR                           1
     Delay_us                       30
     ?Subroutine0                    6
     Delay_ms                       39
     Delay_s                        31
     ??Subroutine5_0                 5
     Ds18b20Delay                   24
     Ds18b20InputInitial             6
     Ds18b20OutputInitial            6
     Ds18b20Initial                103
     ??Subroutine6_0                 6
     Ds18b20Write                   51
     ?Subroutine3                    2
     ?Subroutine1                    1
     Ds18b20Read                    68
     ReadDs18B20                    25
     ?Subroutine2                   21
     ?Subroutine4                    9
     floatReadDs18B20               66
     __Constant_3d800000             4
     ??Delay_us?relay                6
     ??Delay_ms?relay                6
     ??Delay_s?relay                 6
     ??Ds18b20Delay?relay            6
     ??Ds18b20InputInitial?relay     6
     ??Ds18b20OutputInitial?relay    6
     ??Ds18b20Initial?relay          6
     ??Ds18b20Write?relay            6
     ??Ds18b20Read?relay             6
     ??ReadDs18B20?relay             6
     ??floatReadDs18B20?relay        6

 
 499 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
 
 565 bytes of CODE  memory
   0 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
