///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        12/May/2021  11:04:46 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\Source\ds18b2 /
//                          0.c                                               /
//    Command line       =  -f "E:\zb\温湿度采集1 -                           /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ /
//                          f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\zb\温湿度采集1 -       /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\Source\ds18b20.c" -D ZIGBEEPRO    /
//                          -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D        /
//                          xMT_ZDO_FUNC -lC "E:\zb\温湿度采集1 -             /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\" /
//                           -lA "E:\zb\温湿度采集1 -                         /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\" /
//                           --diag_suppress Pe001,Pa010 -o                   /
//                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\Coo /
//                          rdinatorEB-Pro\Obj\" -e --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "E:\zb\温湿度采集1 -      /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\" -I "E:\zb\温湿度采集1  /
//                          - 副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\SOURCE\" -I         /
//                          "E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\ZMAIN\TI2530DB\" -I "E:\zb\温湿度采集1 -    /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MT\" -I "E:\zb\温湿度采集1 -                    /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\INCLUDE\" -I "E:\zb\温湿度采集1 -           /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\TARGET\CC2530EB\" -I "E:\zb\温湿度采集1 -   /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\OSAL\MCU\CCSOC\" -I "E:\zb\温湿度采集1 -        /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\OSAL\INCLUDE\" -I "E:\zb\温湿度采集1 -          /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\AF\" -I "E:\zb\温湿度采集1 -              /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\NWK\" -I "E:\zb\温湿度采集1 -             /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SEC\" -I "E:\zb\温湿度采集1 -             /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SAPI\" -I "E:\zb\温湿度采集1 -            /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SYS\" -I "E:\zb\温湿度采集1 -             /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\ZDO\" -I "E:\zb\温湿度采集1 -             /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\F8W\" -I "E:\zb\温湿度采集1 -              /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\" -I "E:\zb\温湿度采集1 -                  /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\SERVICES\SADDR\" -I "E:\zb\温湿度采集1 -        /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\SERVICES\SDATA\" -I "E:\zb\温湿度采集1 -        /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\INCLUDE\" -I "E:\zb\温湿度采集1 -           /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\HIGH_LEVEL\" -I "E:\zb\温湿度采集1 -        /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\" -I "E:\zb\温湿度采集1 -   /
//                          副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz          /
//    List file          =  E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB-Pro\List\ds18b20.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ds18b20

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?FLT_MUL
        EXTERN ?L_MOV_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0

        PUBLIC ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,0203H
        PUBLIC ??Delay_s?relay
        FUNCTION ??Delay_s?relay,0203H
        PUBLIC ??Delay_us?relay
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??Ds18b20Delay?relay
        FUNCTION ??Ds18b20Delay?relay,0203H
        PUBLIC ??Ds18b20Initial?relay
        FUNCTION ??Ds18b20Initial?relay,0203H
        PUBLIC ??Ds18b20InputInitial?relay
        FUNCTION ??Ds18b20InputInitial?relay,0203H
        PUBLIC ??Ds18b20OutputInitial?relay
        FUNCTION ??Ds18b20OutputInitial?relay,0203H
        PUBLIC ??Ds18b20Read?relay
        FUNCTION ??Ds18b20Read?relay,0203H
        PUBLIC ??Ds18b20Write?relay
        FUNCTION ??Ds18b20Write?relay,0203H
        PUBLIC ??ReadDs18B20?relay
        FUNCTION ??ReadDs18B20?relay,0203H
        PUBLIC ??floatReadDs18B20?relay
        FUNCTION ??floatReadDs18B20?relay,0203H
        PUBLIC Delay_ms
        FUNCTION Delay_ms,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Delay_s
        FUNCTION Delay_s,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_us
        FUNCTION Delay_us,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20Delay
        FUNCTION Ds18b20Delay,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Ds18b20Initial
        FUNCTION Ds18b20Initial,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Ds18b20InputInitial
        FUNCTION Ds18b20InputInitial,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20OutputInitial
        FUNCTION Ds18b20OutputInitial,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20Read
        FUNCTION Ds18b20Read,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Ds18b20Write
        FUNCTION Ds18b20Write,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK P0DIR
        PUBLIC ReadDs18B20
        FUNCTION ReadDs18B20,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK _A_P0
        PUBWEAK __Constant_3d800000
        PUBLIC floatReadDs18B20
        FUNCTION floatReadDs18B20,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Delay_ms            SYMBOL "Delay_ms"
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
Delay_s             SYMBOL "Delay_s"
??Delay_s?relay     SYMBOL "?relay", Delay_s
Delay_us            SYMBOL "Delay_us"
??Delay_us?relay    SYMBOL "?relay", Delay_us
Ds18b20Delay        SYMBOL "Ds18b20Delay"
??Ds18b20Delay?relay SYMBOL "?relay", Ds18b20Delay
Ds18b20Initial      SYMBOL "Ds18b20Initial"
??Ds18b20Initial?relay SYMBOL "?relay", Ds18b20Initial
Ds18b20InputInitial SYMBOL "Ds18b20InputInitial"
??Ds18b20InputInitial?relay SYMBOL "?relay", Ds18b20InputInitial
Ds18b20OutputInitial SYMBOL "Ds18b20OutputInitial"
??Ds18b20OutputInitial?relay SYMBOL "?relay", Ds18b20OutputInitial
Ds18b20Read         SYMBOL "Ds18b20Read"
??Ds18b20Read?relay SYMBOL "?relay", Ds18b20Read
Ds18b20Write        SYMBOL "Ds18b20Write"
??Ds18b20Write?relay SYMBOL "?relay", Ds18b20Write
ReadDs18B20         SYMBOL "ReadDs18B20"
??ReadDs18B20?relay SYMBOL "?relay", ReadDs18B20
floatReadDs18B20    SYMBOL "floatReadDs18B20"
??floatReadDs18B20?relay SYMBOL "?relay", floatReadDs18B20

// E:\zb\温湿度采集1 - 副本\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ds18b20.c
//    1 #include "ds18b20.h" 

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 
//    3 #define Ds18b20IO P0_7       //温度传感器引脚
//    4 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    5 void Delay_us(unsigned int k)//us延时函数
Delay_us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_us
        CODE
//    6 {
        ; Saved register size: 0
        ; Auto size: 0
//    7     T1CC0L = 0x06; 
        MOV     0xda,#0x6
//    8     T1CC0H = 0x00; 
        MOV     0xdb,#0x0
//    9     T1CTL = 0x02; 
        MOV     0xe4,#0x2
        SJMP    ??Delay_us_0
//   10     while(k)
//   11     { 
//   12         while(!(T1CNTL >= 0x04));
??Delay_us_1:
        MOV     A,0xe2
        CLR     C
        SUBB    A,#0x4
        JC      ??Delay_us_1
//   13         k--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//   14     }
??Delay_us_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??Delay_us_1
        CFI EndBlock cfiBlock0
//   15     T1CTL = 0x00;  //关闭定时器
        REQUIRE ?Subroutine0
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
        REQUIRE T1CNTL
        ; // Fall through to label ?Subroutine0
//   16 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        MOV     0xe4,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   17 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   18 void Delay_ms(unsigned int k)
Delay_ms:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Delay_ms
        CODE
//   19 {
        ; Saved register size: 0
        ; Auto size: 0
//   20     T1CC0L = 0xe8;
        MOV     0xda,#-0x18
//   21     T1CC0H = 0x03;
        MOV     0xdb,#0x3
//   22     T1CTL = 0x0a; //模模式 32分频
        MOV     0xe4,#0xa
        SJMP    ??Delay_ms_0
//   23     while(k)
//   24     {
//   25         while(!((T1CNTL >= 0xe8)&&(T1CNTH >= 0x03)));
??Delay_ms_1:
        MOV     A,0xe2
        CLR     C
        SUBB    A,#-0x18
        JC      ??Delay_ms_1
        MOV     A,0xe3
        CLR     C
        SUBB    A,#0x3
        JC      ??Delay_ms_1
//   26         k--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//   27     }
??Delay_ms_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??Delay_ms_1
//   28     T1CTL = 0x00; //关闭定时器
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//   29 }
//   30 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   31 void Delay_s(unsigned int k)
Delay_s:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Delay_s
        CODE
//   32 {
        FUNCALL Delay_s, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??Delay_s_0
//   33     while(k)
//   34     {
//   35         Delay_ms(1000);
??Delay_s_1:
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Delay_ms?relay
//   36         k--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
??Delay_s_0:
        MOV     R7,A
//   37     }
        MOV     A,R6
        ORL     A,R7
        JNZ     ??Delay_s_1
//   38 }
        SJMP    ??Subroutine5_0
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,A
        CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//   39 
//   40 //时钟频率为32M

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void Ds18b20Delay(unsigned int k)
Ds18b20Delay:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Ds18b20Delay
        CODE
//   42 {
        ; Saved register size: 0
        ; Auto size: 0
//   43     unsigned int i,j;
//   44     for(i=0;i<k;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Ds18b20Delay_0
//   45         for(j=0;j<2;j++);
??Ds18b20Delay_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Ds18b20Delay_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Ds18b20Delay_1
//   46 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//   47 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   48 void Ds18b20InputInitial(void)//设置端口为输入
Ds18b20InputInitial:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Ds18b20InputInitial
        CODE
//   49 {
        ; Saved register size: 0
        ; Auto size: 0
//   50     P0DIR &= 0x7f;
        ANL     0xfd,#0x7f
//   51 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
        REQUIRE P0DIR
//   52 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 void Ds18b20OutputInitial(void)//设置端口为输出
Ds18b20OutputInitial:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Ds18b20OutputInitial
        CODE
//   54 {
        ; Saved register size: 0
        ; Auto size: 0
//   55     P0DIR |= 0x80;
        ORL     0xfd,#0x80
//   56 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
        REQUIRE P0DIR
//   57 
//   58 //ds18b20初始化  初始化成功返回0x00，失败返回0x01

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   59 unsigned char Ds18b20Initial(void)
Ds18b20Initial:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Ds18b20Initial
        CODE
//   60 {
        FUNCALL Ds18b20Initial, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   61     unsigned char Status = 0x00;
        MOV     ?V0 + 0,#0x0
//   62     unsigned int CONT_1 = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//   63     unsigned char Flag_1 = 1;
        MOV     ?V0 + 1,#0x1
//   64     Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//   65     Ds18b20IO = 1;      //DQ复位
        SETB    0x80.7
//   66     Ds18b20Delay(260);  //稍做延时
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x4
        MOV     R3,#0x1
        LCALL   ??Ds18b20Delay?relay
//   67     Ds18b20IO = 0;      //单片机将DQ拉低
        CLR     0x80.7
//   68     Ds18b20Delay(750);  //精确延时 大于 480us 小于960us
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#-0x12
        MOV     R3,#0x2
        LCALL   ??Subroutine6_0 & 0xFFFF
//   69     Ds18b20IO = 1;      //拉高总线
//   70     Ds18b20InputInitial();//设置IO输入
??CrossCallReturnLabel_7:
        ANL     0xfd,#0x7f
        SJMP    ??Ds18b20Initial_0
//   71     while((Ds18b20IO != 0)&&(Flag_1 == 1))//等待ds18b20响应，具有防止超时功能
//   72     {                                      //等待约60ms左右
//   73         CONT_1++;
??Ds18b20Initial_1:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//   74         Ds18b20Delay(10);
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//   75         if(CONT_1 > 8000)Flag_1 = 0;
        CLR     C
        MOV     A,R6
        SUBB    A,#0x41
        MOV     A,R7
        SUBB    A,#0x1f
        JC      ??Ds18b20Initial_2
        MOV     ?V0 + 1,#0x0
//   76         Status = Ds18b20IO;
??Ds18b20Initial_2:
        MOV     C,0x80.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
//   77     }
??Ds18b20Initial_0:
        MOV     C,0x80.7
        JNC     ??Ds18b20Initial_3
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        JC      ??Ds18b20Initial_1
//   78     Ds18b20OutputInitial();
??Ds18b20Initial_3:
        ORL     0xfd,#0x80
//   79     Ds18b20IO = 1;
        SETB    0x80.7
//   80     Ds18b20Delay(100);
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//   81     return Status;       //返回初始化状态
        MOV     R1,?V0 + 0
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
        REQUIRE _A_P0
        REQUIRE P0DIR
//   82 }
//   83 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 void Ds18b20Write(unsigned char infor)
Ds18b20Write:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function Ds18b20Write
        CODE
//   85 {
        FUNCALL Ds18b20Write, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Write, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Write, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Write, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   86     unsigned int i;
//   87     Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//   88     for(i=0;i<8;i++)
        MOV     R6,#0x8
//   89     {
//   90         if((infor & 0x01))
??Ds18b20Write_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        CLR     0x80.7
        JNC     ??Ds18b20Write_1
//   91         {
//   92             Ds18b20IO = 0;
//   93             Ds18b20Delay(6);
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x6
        LCALL   ?Subroutine3 & 0xFFFF
//   94             Ds18b20IO = 1;
//   95             Ds18b20Delay(50);
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x32
        SJMP    ??Ds18b20Write_2
//   96         }
//   97         else
//   98         {
//   99             Ds18b20IO = 0;
//  100             Ds18b20Delay(50);
??Ds18b20Write_1:
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x32
        LCALL   ?Subroutine3 & 0xFFFF
//  101             Ds18b20IO = 1;
//  102             Ds18b20Delay(6);
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x6
??Ds18b20Write_2:
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//  103         }
//  104         infor >>= 1;
        MOV     A,R7
        CLR     C
        RRC     A
        MOV     R7,A
//  105     }
        DEC     R6
        MOV     A,R6
        JNZ     ??Ds18b20Write_0
//  106 }
        LJMP    ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock10
        REQUIRE _A_P0
        REQUIRE P0DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL   ??Ds18b20Delay?relay
        SETB    0x80.7
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  107 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 unsigned char Ds18b20Read(void)
Ds18b20Read:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function Ds18b20Read
        CODE
//  109 {
        FUNCALL Ds18b20Read, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Ds18b20Delay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  110     unsigned char Value = 0x00;
        MOV     R6,#0x0
//  111     unsigned int i;
//  112     Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//  113     Ds18b20IO = 1;
        SETB    0x80.7
//  114     Ds18b20Delay(10);
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//  115     for(i=0;i<8;i++)
        MOV     R7,#0x8
//  116     {
//  117         Value >>= 1; 
??Ds18b20Read_0:
        MOV     A,R6
        CLR     C
        RRC     A
        MOV     R6,A
//  118         Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//  119         Ds18b20IO = 0;// 给脉冲信号
        CLR     0x80.7
//  120         Ds18b20Delay(3);
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x3
        LCALL   ?Subroutine3 & 0xFFFF
//  121         Ds18b20IO = 1;// 给脉冲信号
//  122         Ds18b20Delay(3);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//  123         Ds18b20InputInitial();
        ANL     0xfd,#0x7f
//  124         if(Ds18b20IO == 1) Value |= 0x80;
        MOV     C,0x80.7
        JNC     ??Ds18b20Read_1
        MOV     A,R6
        SETB    0xE0 /* A   */.7
        MOV     R6,A
//  125         Ds18b20Delay(15);
??Ds18b20Read_1:
        ; Setup parameters for call to function Ds18b20Delay
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   ??Ds18b20Delay?relay
//  126     } 
        DEC     R7
        MOV     A,R7
        JNZ     ??Ds18b20Read_0
//  127     return Value;
        MOV     A,R6
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock20
        REQUIRE _A_P0
        REQUIRE P0DIR
//  128 }
//  129 
//  130 //温度读取函数

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 unsigned char ReadDs18B20(void) 
ReadDs18B20:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function ReadDs18B20
        CODE
//  132 {
        FUNCALL ReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  133     unsigned char V1,V2;   //定义高低8位 缓冲
//  134     unsigned char temp;    //定义温度缓冲寄存器
//  135     
//  136     Ds18b20Initial();
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine2 & 0xFFFF
//  137     Ds18b20Write(0xcc);    // 跳过读序号列号的操作
//  138     Ds18b20Write(0x44);    // 启动温度转换
//  139     
//  140     Ds18b20Initial();
//  141     Ds18b20Write(0xcc);    //跳过读序号列号的操作 
//  142     Ds18b20Write(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
//  143     
//  144     V1 = Ds18b20Read();    //低位
??CrossCallReturnLabel_0:
        MOV     R6,A
//  145     V2 = Ds18b20Read();    //高位
//  146     temp = ((V1 >> 4)+((V2 & 0x07)*16)); //转换数据 
//  147 
//  148     return temp;
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        ANL     A,#0x7
        SWAP    A
        MOV     R0,A
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ADD     A,R0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock21
//  149 }
//  150 
//  151 //温度读取函数 带1位小数位

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 float floatReadDs18B20(void) 
floatReadDs18B20:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function floatReadDs18B20
        CODE
//  153 {
        FUNCALL floatReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  154     unsigned char V1,V2;   //定义高低8位 缓冲
//  155     unsigned int temp;     //定义温度缓冲寄存器
//  156     float fValue;
//  157     Ds18b20Initial();
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine2 & 0xFFFF
//  158     Ds18b20Write(0xcc);    // 跳过读序号列号的操作
//  159     Ds18b20Write(0x44);    // 启动温度转换
//  160     
//  161     Ds18b20Initial();
//  162     Ds18b20Write(0xcc);    //跳过读序号列号的操作 
//  163     Ds18b20Write(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
//  164     
//  165     V1 = Ds18b20Read();    //低位
??CrossCallReturnLabel_1:
        MOV     ?V0 + 0,A
//  166     V2 = Ds18b20Read();    //高位
//  167     //temp = ((V1 >> 4)+((V2 & 0x07)*16)); //转换数据 
//  168     temp=V2*0xFF+V1;
//  169     fValue = temp*0.0625;
//  170     
//  171     return fValue;
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        MOV     B,#-0x1
        MUL     AB
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3d800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22
//  172 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#0x44
        LCALL   ??Ds18b20Write?relay
        ; Setup parameters for call to function Ds18b20Initial
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#-0x42
        LCALL   ??Ds18b20Write?relay
        ; Setup parameters for call to function Ds18b20Read
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_2, ??CrossCallReturnLabel_1
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL   ??Ds18b20Initial?relay
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#-0x34
        LCALL   ??Ds18b20Write?relay
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3d800000:
        DD 3D800000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_s?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_s

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Delay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Delay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20InputInitial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20InputInitial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20OutputInitial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20OutputInitial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Initial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Initial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadDs18B20?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadDs18B20

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??floatReadDs18B20?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    floatReadDs18B20

        END
// 
// 499 bytes in segment BANKED_CODE
//  66 bytes in segment BANK_RELAYS
//   7 bytes in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
// 
// 565 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
